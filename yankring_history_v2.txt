timezone.now(),v
.str,v
specification,v
            if data:,V
    transport_module =,V
용도지역안에서의 건폐율,v
    @pytest.mark.django_db,V
(APIView),v
pattern = r'\d+\.\s*(.*?주거지역|농림지역|.*?지역)\s*:\s*(\d+)퍼센트',v
    def create_tables(self):,V
            self.doc.create_table(),V
    def add_tables(),V
p,v
        data = {k:', '.join(v) if isinstance(v, list)\                               else v\                               for k,v in data.items()},V
 ,v
],v
k,v
[,v
{,v
},v
        return {k:v},V
data,v
,V
    def map_,V
        lots_data = [lot.get_api_data() for lot in self.lots.all()],V
lots_data,v
[],v
[lot.get_api_data() for lot in self.lots.all()],v
    def ,V
api,v
lots_api,v
            data[k].append(v),V
            data.,V
        {            'address':         },V
    # refactor,V
    def map_value(self):,V
        data = {},V
map_value_to_func,v
        data = {}        def add_data(k, v):            data.setdefault(k, 0)            data[k] += float(v)        def append_data(k, v):            data.setdefault(k, [])            if v in data[k]:                return            data[k].append(v)        def append_land_character_property_data(v):            latest_data = v[-1]            add_data('land_area', latest_data['lndpclAr'])            append_data('land_destrict', latest_data['prposArea1Nm'])            append_data('official_land_price', latest_data['pblntfPclnd'])            append_data('land_category', latest_data['lndcgrCodeNm'])        map_value_to_func = {            'address': lambda v: append_data('addresses', v),            'land_character_property': lambda v: append_land_character_property_data(v)        },V
        def,V
        def add_data(k, v):            data.setdefault(k, 0)            data[k] += float(v),V
            _value = ,V
_value,v
', '.join(v) if isinstance(v, list) else v,v
\,v
        ''',V
',v
            data = {k:value },V
            if ,V
        for,V
        lots = self.lots.all(),V
lots,v
            if v not in data[k]:,V
                data[k].append(v),V
        lots = self.lots.all()        lots_data =  [lot.get_api_data() for lot in lots],V
append_,v
            data[],V
    exceptions as exc,V
gen = ,v
s,v
        for report in reports:,V
report,v
        report,V
        reports = m.UserDevelopablePropertyReport.objects.filter(),V
filter,v
        report = ,V
        generate_developable_property_report(report.id),V
        gener,V
        _propert,V
        report = m.UserDevelopablePropertyReport.objects.create(            user=user,            developable_property=_property,        ),V
    def generate_report_docx(self, data=None, report_template=None, filename=None):        data = data or self.get_api_data()        if not report_template:            raise exc.DevelopablePropertyReportTemplateDoseNotExists()        doc = docx.DmDocx(report_template)        doc_mapping_data = {'{{%s}}' % k:v for k,v in data.items()}        doc.replace_paragraph_string(doc_mapping_data)        doc.replace_table_cell_string(doc_mapping_data)        with tempfile.TemporaryFile() as f:            doc.save(f)            f.seek(0)            self.attach(f, filename),V
    def get_api_data(self):        _property = self.developable_property        lots_data = _property.get_lots_api_data()        data = {}        def append_data(k, v):            data.setdefault(k, [])            if v not in data[k]:                data[k].append(v)        def add_data(k, v):            data.setdefault(k, 0)            data[k] += float(v)        def append_land_character_property_data(v):            latest_data = v[-1]            add_data('land_area', latest_data['lndpclAr'])            append_data('land_destrict', latest_data['prposArea1Nm'])            append_data('official_land_price', latest_data['pblntfPclnd'])            append_data('land_category', latest_data['lndcgrCodeNm'])        map_value_to_func = {            'address': lambda v: append_data('addresses', v),            'land_character_property': lambda v: append_land_character_property_data(v)        }        for lot_data in lots_data:            for k,v in lot_data.items():                if k in map_value_to_func:                    map_value_to_func[k](v)        return data,V
        def append_data(k, v):            data.setdefault(k, [])            if v not in data[k]:                data[k].append(v)        def add_data(k, v):            data.setdefault(k, 0)            data[k] += float(v)        def append_land_character_property_data(v):            latest_data = v[-1]            add_data('land_area', latest_data['lndpclAr'])            append_data('land_destrict', latest_data['prposArea1Nm'])            append_data('official_land_price', latest_data['pblntfPclnd'])            append_data('land_category', latest_data['lndcgrCodeNm'])        map_value_to_func = {            'address': lambda v: append_data('addresses', v),            'land_character_property': lambda v: append_land_character_property_data(v)        }        for lot_data in lots_data:            for k,v in lot_data.items():                if k in map_value_to_func:                    map_value_to_func[k](v)        return data,V
return,v
            print('try generate report file'),V
file,v
        print,V
        filename = 'test.docx',V
 filename,,v
            filename = 'test.docx',V
, filename,v
report_name,v
report_file,v
            template = m.UserDevelopablePropertyReportTemplate.objects.all()\                                                                      .order_by('-created_at')\                                                                      .last(),V
            report_file = report.generate_report_docx(template),V
            report_name = urllib.parse.quote_plus(report_file.name.replace(' ', '')),V
            report_file = report.generate_report_docx(template)            report_name = urllib.parse.quote_plus(report_file.name.replace(' ', '')),V
        data = report.get_api_data()        ReportTemplate = m.UserDevelopablePropertyReportTemplate        template = ReportTemplate.objects.all().last().resource        print('try generate report file')        filename = 'test.docx'        gen = rg.DevelopablePropertyReportGenerator(            data, template, filename, report        )        gen.generate(),V
        file = report.generate_report_docx(template),V
        ReportTemplate = m.UserDevelopablePropertyReportTemplate        template = ReportTemplate.objects.all().last(),V
        template ,V
        report = m.UserDevelopablePropertyReport.objects.get(id=report_obj_id)        ReportTemplate = m.UserDevelopablePropertyReportTemplate        template = ReportTemplate.objects.all().last(),V
TemporaryDirectory,v
        developable_property_report.generate_report_docx(data, template),V
    report_generator as rg,V
    @pytest.mark.django_db    def test_generate_report(self, developable_property_report,              developable_property_report_template):        data = {            'addresses': '삼성동118-24, 삼성동118-23'        }        template = developable_property_report_template.resource        assert template        developable_property_report.generate_report_docx(data, template)        report_file = developable_property_report.resource        assert report_file        doc = docx.DmDocx(report_file)        paragraph_text = doc.get_paragraph_text()        assert data['addresses'] in paragraph_text,V
        self.doc = docx.DmDocx(template),V
            f.seek(0),V
ping,v
?,v
