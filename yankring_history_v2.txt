select * from "dealmatch_deal" where title="오픈딜임다",V
postgres://postgres:warmblood@localhost:5432/dealmatch,v
my-dev-db,v
mypassword,v
postgres://postgres:mypassword@localhost:5432/my-dev-db,v
function s:resolve_production_url()  let url = system('get-prod-url')  return urlendlet g:dbs = {\ 'dev': 'postgres://postgres:mypassword@localhost:5432/my-dev-db',\ 'staging': 'postgres://postgres:mypassword@localhost:5432/my-staging-db',\ 'wp': 'mysql://root@localhost/wp_awesome',\ 'production': function('s:resolve_production_url')\ },v
i,v
mb-4 ,v
dealmatch_nc.notifications.teams.MsTeams,V
딜리스트를 볼수있는 권한을 가진 사람도 볼수있게함,v
                          {% endif %},V
                          {% has_perm 'can_see_deal_list_proposal_count' user as can_see_deal_list_proposal_count %},V
class TestDealList:    @pytest.mark.django_db    def test_should_only_staff_can_see_deals_proposal_count(self, user_1):        assert p.can_see_deal_list_proposal_count(user_1),V
 is True,v
, deal,v
deal.is_readable() and ,v
139962,v
        return True,V
    with ensure_has_market_profile():        return market_profile_has_perm(user, 'can_see_deal_list_proposal_count'),V
    if user.is_staff and user.has_perm('dealmatch.view_deal'):        return True,V
can_visit_deal_list,v
 ,v
",v
Plug 'tpope/vim-dadbod'Plug 'kristijanhusak/vim-dadbod-ui'Plug 'kristijanhusak/vim-dadbod-completion' "Optional,v
* 딜 목록에서 제안 갯수를 딜리스트를 볼수있는 권한을 가진 사람도 볼수있게함,V
* ,V
,V
        assert p.can_see_deal_list_proposal_count(staff_user),V
market_,v
    if user.is_authenticated:        return True,V
    return False,V
is False,v
@predicatedef can_see_deal_list_proposal_count(user):    "딜 목록 제안 갯수 보기"    if user.is_staff:        return True    return False,V
class TestDealList:    @pytest.mark.django_db    def test_should_only_staff_can_see_deals_proposal_count(self, user_1, staff_user):        assert p.can_see_deal_list_proposal_count(user_1) is False        assert p.can_see_deal_list_proposal_count(staff_user),V
매입·매각,v
    service = _('Service'),V
https://github.com/tpope/vim-dadbod,v
a,v
href="?{% preserve_filters 'filter' with_current_filters 'search_query' search_query %}",v
                              {% if deal.express %}                                <div class="dm-badge-xs dm-badge-express">                                  {% translate '긴급' %}                                </div>                              {% endif %},V
                              {% endif %},V
 {% if deal.is_expired %}opacity-50{% endif %},v
                              {% endif %}                              {% if deal.is_closed %},V
px-2 py-1 bg-dm-accent-navy text-white flex items-center rounded-md,v
medium,v
                                  <iconify-icon icon="ep:document-checked" width="14px" height='14px' inline class='mr-1.5' ></iconify-icon>,V
                                  <iconify-icon icon="iconoir:flash" width="16px" height='16px' inline class='mr-1' ></iconify-icon>,V
                                  <iconify-icon icon="ic:round-lock-clock" width="16px" height='16px' inline class='mr-1' ></iconify-icon>,V
white,v
.dm-badge-closed { @apply text-white bg- },V
black,v
gray-200,v
gray-600,v
px-2 py-1 bg-dm-p-blue-500 text-white flex items-center rounded-md,v
px-2 py-1 bg-black text-white flex items-center rounded-md,v
sm,v
px-2 py-1 bg-gray-200 text-gray-600 flex items-center rounded-md,v
 usefull,v
l,v
    racoc#pum#visible() ? coc#pum#next(0) : "\,V
"radio_fields,V
'Models for dealmatch'from uuid import uuid4from functools import partialfrom django.conf import settingsfrom django.db import modelsfrom django.db.models.constraints import UniqueConstraintfrom django.contrib.auth.models import AbstractUserfrom rules.contrib.models import RulesModelfrom dealmatch import (    constants as c,    model_managers as mm,    model_mixins as mx,    model_querysets as mqs,)def generate_uuid():    return str(uuid4())def prefix_path(prefix, obj, filename):    normalized_prefix = prefix.replace('.', '_').lower()    return f'{normalized_prefix}/{obj.uuid}/{filename}'class User(mx.User, AbstractUser):    '''User'''    uuid: models.Field = models.CharField(max_length=36, db_index=True, default=generate_uuid)    profile_image_resource: models.Field = models.ImageField(        upload_to=partial(prefix_path, 'profile_image'),        max_length=512, default=c.DEFAULT_USER_PROFILE_IMAGE,        verbose_name='프로필 이미지')    profile_image_thumbnail: models.Field = models.ImageField(        upload_to=partial(prefix_path, 'profile_thumbnail_image'),        max_length=512, default=c.DEFAULT_USER_PROFILE_IMAGE,        verbose_name='프로필 썸네일 이미지')    profile_image_preview: models.Field = models.ImageField(        upload_to=partial(prefix_path, 'profile_preview_image'),        max_length=512, default=c.DEFAULT_USER_PROFILE_IMAGE,        verbose_name='프로필 프리뷰 이미지')    name: models.Field = models.CharField(max_length=30, verbose_name='이름')    phone_number: models.Field = models.CharField(max_length=15, null=True, blank=True, verbose_name='휴대폰 번호')    memo: models.Field = models.CharField(max_length=1000, default='', blank=True)    plan: models.Field = models.ForeignKey('Plan', null=True, on_delete=models.SET_NULL)    intro: models.Field = models.CharField(max_length=300, verbose_name='소개', null=True, blank=True)    member_type: models.Field = models.CharField(max_length=30, db_index=True,                                                 null=True, blank=True,                                                 choices=c.enum_to_choice(c.MemberType),                                                 verbose_name='회원 유형')    agreed_to_marketing: models.Field = models.BooleanField(default=False, verbose_name='마케팅 수신 동의')    objects = mm.UserManager()class School(mx.School, models.Model):    uuid: models.Field = models.CharField(max_length=36, db_index=True, default=generate_uuid)    name: models.Field = models.CharField(max_length=36)    created_by: models.Field = models.CharField(max_length=30, choices=c.enum_to_choice(c.SchoolCreatedByType),                                                default=c.SchoolCreatedByType.User.name,                                                null=True, blank=True)    created_at: models.Field = models.DateTimeField(auto_now_add=True)class UserEducation(models.Model):    user: models.Field = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name="educations")    school: models.Field = models.ForeignKey('School', on_delete=models.CASCADE)    major: models.Field = models.CharField(max_length=60)    graduated_year: models.Field = models.IntegerField()    created_at: models.Field = models.DateTimeField(auto_now_add=True)class UserTrait(models.Model):    code: models.Field = models.CharField(max_length=40, unique=True)    policy: models.Field = models.JSONField(default=dict, blank=True)    created_at: models.Field = models.DateTimeField(auto_now_add=True)class EmailVerification(mx.EmailVerification, models.Model):    uuid: models.Field = models.CharField(max_length=36, db_index=True, default=generate_uuid)    email: models.Field = models.CharField(max_length=60)    pin_code: models.Field = models.CharField(max_length=200, null=True)    expired_at: models.Field = models.DateTimeField()    created_at: models.Field = models.DateTimeField(auto_now_add=True)    objects = mm.EmailVerificationManager.from_queryset(mqs.EmailVerificationQuerySet)()class PasswordlessAuthToken(mx.PasswordlessAuthToken, models.Model):    '''Contains passwordless authentication pin codes.    This is very similar to `EmailVarification` class, but that is used for signup, this is used for signin. Signing in is used more frequently so that table grows faster than that.    Someday, after deep consideration, this class can be merged with `EmailVerification` class.    '''    uuid: models.Field = models.CharField(max_length=36, db_index=True, default=generate_uuid)    channel: models.Field = models.CharField(max_length=15,                                             choices=c.enum_to_choice(c.PasswordlessAuthChannel))    address: models.Field = models.CharField(max_length=255)    pin_code: models.Field = models.CharField(max_length=200)    user: models.Field = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE,                                           null=True, blank=True)    expires_at: models.Field = models.DateTimeField()    is_active: models.Field = models.BooleanField(default=True)    created_at: models.Field = models.DateTimeField(auto_now_add=True)    objects = mm.PasswordlessAuthToken()class SurveyOption(models.Model):    category: models.Field = models.CharField(max_length=30, db_index=True,                                              choices=c.enum_to_choice(c.SurveyCategoryType))    value: models.Field = models.CharField(max_length=30)    created_at: models.Field = models.DateTimeField(auto_now_add=True)    class Meta:        db_table = 'dealmatch_surveyoption'class UserSurvey(models.Model):    user: models.Field = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)    selected: models.Field = models.ForeignKey('SurveyOption', on_delete=models.CASCADE, null=True)    etc: models.Field = models.CharField(max_length=200, null=True)    created_at: models.Field = models.DateTimeField(auto_now_add=True)    class Meta:        db_table = 'dealmatch_usersurvey'        verbose_name = '설문조사'        verbose_name_plural = '설문조사(들)'class Company(mx.Company, models.Model):    uuid: models.Field = models.CharField(max_length=36, db_index=True, default=generate_uuid)    user: models.Field = models.OneToOneField(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)    logo: models.Field = models.ImageField(        upload_to=partial(prefix_path, 'company_logo'),        max_length=512, default='company_default_logo.png')    name: models.Field = models.CharField(max_length=50)    department: models.Field = models.CharField(max_length=50)    position: models.Field = models.CharField(max_length=50)    address: models.Field = models.CharField(max_length=50, blank=True, default='')    created_at: models.Field = models.DateTimeField(auto_now_add=True)    class Meta:        verbose_name = '회사'        verbose_name_plural = '회사(들)'class Plan(mx.Plan, models.Model):    code: models.Field = models.CharField(max_length=10, unique=True)    name: models.Field = models.CharField(max_length=20)    policy: models.Field = models.JSONField(default=dict, blank=True)    level: models.Field = models.IntegerField(unique=True)    is_active: models.Field = models.BooleanField(default=True)    created_at: models.Field = models.DateTimeField(auto_now_add=True)    class Meta:        ordering = ['level']        verbose_name = '요금제'        verbose_name_plural = '요금제들'class Category(mx.Category, models.Model):    '''Category'''    type: models.Field = models.CharField(max_length=30, db_index=True,                                          choices=c.enum_to_choice(c.CategoryType))    name: models.Field = models.CharField(max_length=100, db_index=True)    created_at: models.Field = models.DateTimeField(auto_now_add=True)    is_active: models.Field = models.BooleanField(default=True)    priority: models.Field = models.IntegerField(default=100)    parent: models.Field = models.ForeignKey('Category', on_delete=models.SET_NULL,                                             related_name='categories',                                             null=True, blank=True)    objects = mm.CategoryManager.from_queryset(mqs.CategoryQuerySet)()    class Meta:        verbose_name = '카테고리'        verbose_name_plural = '카테고리(들)'class Banner(models.Model):    uuid: models.Field = models.CharField(max_length=36, db_index=True, default=generate_uuid)    title: models.Field = models.CharField(max_length=50, default="배너")    place: models.Field = models.CharField(max_length=50, choices=c.enum_to_choice(c.BannerPlaceType),                                           default=c.BannerPlaceType.site_main_modal.name)    message: models.Field = models.CharField(max_length=50, default='', verbose_name='띠배너 문구', blank=True, null=True)    button_name: models.Field = models.CharField(max_length=20, default='', verbose_name='띠배너 버튼명', blank=True, null=True)    image: models.Field = models.ImageField(        upload_to=partial(prefix_path, 'banner_image'),        blank=True, null=True, verbose_name='배너 이미지',        max_length=1024    )    url: models.Field = models.CharField(max_length=200, blank=True, null=True)    is_active: models.Field = models.BooleanField(default=False)    dismiss_duration_days: models.Field = models.IntegerField(default=1, verbose_name='안보기 기간(일)')    created_at: models.Field = models.DateTimeField(auto_now_add=True, verbose_name='배너 등록일')    objects = mm.BannerManager.from_queryset(mqs.BannerQuerySet)()    def __str__(self):        return self.title    class Meta:        verbose_name = '배너'        verbose_name_plural = '배너(들)'class FeatureFlag(models.Model):    name: models.Field = models.CharField(max_length=36)    is_active: models.Field = models.BooleanField(default=False)    objects = mm.FeatureFlagManager.from_queryset(mqs.FeatureFlagQuerySet)()class UserBadge(models.Model):    user: models.Field = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)    badge: models.Field = models.ForeignKey('Badge', on_delete=models.CASCADE)    created_at: models.Field = models.DateTimeField(auto_now_add=True, verbose_name='등록일')    objects = mm.UserBadgeManager.from_queryset(mqs.UserBadgeQuerySet)()    class Meta:        db_table = 'dealmatch_userbadge'        verbose_name = '유저 뱃지'        verbose_name_plural = '유저 뱃지(들)'class Badge(mx.Badge, models.Model):    uuid: models.Field = models.CharField(max_length=36, db_index=True, default=generate_uuid)    name: models.Field = models.CharField(max_length=50, verbose_name='뱃지 이름')    priority: models.Field = models.IntegerField(default=100)    short_description: models.Field = models.CharField(max_length=100)    description: models.Field = models.CharField(max_length=200, blank=True, null=True)    image: models.Field = models.FileField(        upload_to=partial(prefix_path, 'badge_images'),        max_length=512, null=True, blank=True)    created_at: models.Field = models.DateTimeField(auto_now_add=True, verbose_name='등록일')    users = models.ManyToManyField(settings.AUTH_USER_MODEL,                                   through='UserBadge',                                   related_name='badges')    objects = mm.BadgeManager.from_queryset(mqs.BadgeQuerySet)()    def __str__(self): return self.name    class Meta:        verbose_name = '뱃지'        verbose_name_plural = '뱃지(들)'# Models to move to dealmatch_marketclass UserActivityMetric(mx.UserActivityMetric, models.Model):    user: models.Field = models.ForeignKey(settings.AUTH_USER_MODEL,                                           on_delete=models.CASCADE, related_name='activities')    registered_deals: models.Field = models.IntegerField(default=0, verbose_name='등록한 딜')    reviewing_deals: models.Field = models.IntegerField(default=0, verbose_name='검수 중인 딜')    approved_deals: models.Field = models.IntegerField(default=0, verbose_name='모집 중인 딜')    negotiating_deals: models.Field = models.IntegerField(default=0, verbose_name='협상 중인 딜')    received_proposals: models.Field = models.IntegerField(default=0, verbose_name='받은 제안')    sent_proposals: models.Field = models.IntegerField(default=0, verbose_name='보낸 제안')    received_service_requests: models.Field = models.IntegerField(default=0, verbose_name='받은 의뢰')    sent_service_requests: models.Field = models.IntegerField(default=0, verbose_name='보낸 의뢰')    proposal_comments: models.Field = models.IntegerField(default=0, verbose_name='쓴 제안 댓글')    service_request_comments: models.Field = models.IntegerField(default=0, verbose_name='쓴 의뢰 댓글')    created_at = models.DateTimeField(auto_now_add=True)    updated_at = models.DateTimeField(null=True, blank=True)    objects = mm.UserActivityMetricManager.from_queryset(mqs.UserActivityMetricQuerySet)()    class Meta:        db_table = 'dealmatch_useractivitymetric'        verbose_name = '사용자 활동 지표'        verbose_name_plural = '사용자 활동 지표(들)'class Deal(RulesModel, mx.Deal, models.Model):    '''Project'''    uuid: models.Field = models.CharField(max_length=36, db_index=True, default=generate_uuid)    express: models.Field = models.BooleanField(default=False, db_index=True)    anonymous: models.Field = models.BooleanField(default=False)    title: models.Field = models.CharField(max_length=100, db_index=True)    is_private: models.Field = models.BooleanField(default=False)    status: models.Field = models.CharField(max_length=30, db_index=True,                                            choices=c.enum_to_choice(c.DealStatus),                                            default=c.DealStatus.draft.name)    main_image: models.Field = models.ImageField(        upload_to=partial(prefix_path, 'deal_main_image'),        default='default_deal_image_logo_middle.png',        max_length=512    )    owner: models.Field = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE,                                            related_name='deals')    due_date: models.Field = models.DateTimeField(db_index=True)    deal_type: models.Field = models.CharField(max_length=15, db_index=True,                                               choices=c.enum_to_choice(c.DealType))    verified_count: models.Field = models.IntegerField(default=0)    bookmark_count: models.Field = models.IntegerField(default=0)    closed_at: models.Field = models.DateTimeField(null=True, blank=True, db_index=True)    deleted_at: models.Field = models.DateTimeField(null=True, blank=True, db_index=True)    approved_at: models.Field = models.DateTimeField(null=True, blank=True, db_index=True)    negotiated_at: models.Field = models.DateTimeField(null=True, blank=True, db_index=True)    created_at: models.Field = models.DateTimeField(auto_now_add=True, db_index=True)    memo: models.Field = models.CharField(max_length=1000, default='', blank=True)    proposal_count: models.Field = models.IntegerField(default=0)    objects = mm.DealManager.from_queryset(mqs.DealQuerySet)()    class Meta:        db_table = 'dealmatch_deal'        verbose_name = '딜'        verbose_name_plural = '딜(들)'class FinancingDealDetail(models.Model):    deal: models.Field = models.OneToOneField('Deal', on_delete=models.CASCADE)    target_amount: models.Field = models.IntegerField()    maturity: models.Field = models.IntegerField()    target_address: models.Field = models.CharField(max_length=100)    target_full_address: models.Field = models.CharField(max_length=200)    target_address_precision: models.Field = models.CharField(max_length=10)    target_lat: models.Field = models.FloatField(null=True, blank=True)    target_lon: models.Field = models.FloatField(null=True, blank=True)    class Meta:        db_table = 'dealmatch_financingdealdetail'class ServiceDealDetail(models.Model):    deal: models.Field = models.OneToOneField('Deal', on_delete=models.CASCADE)    budget_from: models.Field = models.IntegerField(null=True, blank=True)    budget_to: models.Field = models.IntegerField(null=True, blank=True)    use_escrow: models.Field = models.BooleanField(default=False)    target_address: models.Field = models.CharField(max_length=100)    target_full_address: models.Field = models.CharField(max_length=100)    target_address_precision: models.Field = models.CharField(max_length=100)    target_lat: models.Field = models.FloatField(null=True, blank=True)    target_lon: models.Field = models.FloatField(null=True, blank=True)    class Meta:        db_table = 'dealmatch_servicedealdetail'class SalesDealDetail(models.Model):    deal: models.Field = models.OneToOneField('Deal', on_delete=models.CASCADE)    target_amount: models.Field = models.IntegerField(null=True, blank=True)    target_address: models.Field = models.CharField(max_length=100)    target_full_address: models.Field = models.CharField(max_length=100)    target_address_precision: models.Field = models.CharField(max_length=100)    target_lat: models.Field = models.FloatField(null=True, blank=True)    target_lon: models.Field = models.FloatField(null=True, blank=True)    class Meta:        db_table = 'dealmatch_salesdealdetail'class DealDetail(models.Model):    deal: models.Field = models.ForeignKey('Deal', on_delete=models.CASCADE)    lang: models.Field = models.CharField(max_length=10, choices=settings.LANGUAGES, default='ko-kr')    additionals: models.Field = models.JSONField(default=dict, blank=True)    class Meta:        db_table = 'dealmatch_dealdetail'        constraints = [            UniqueConstraint(fields=['deal', 'lang'], name='uniq_deal_lang'),        ]class DealCategory(models.Model):    deal: models.Field = models.ForeignKey('Deal', on_delete=models.CASCADE)    category: models.Field = models.ForeignKey('Category', on_delete=models.CASCADE)    class Meta:        db_table = 'dealmatch_dealcategory'class DealImage(mx.DealImage, models.Model):    uuid: models.Field = models.CharField(max_length=36, db_index=True, default=generate_uuid)    deal: models.Field = models.ForeignKey('Deal', on_delete=models.CASCADE, related_name='images')    is_main: models.Field = models.BooleanField(default=False)    resource: models.Field = models.ImageField(        upload_to=partial(prefix_path, 'deal_images'),        max_length=512)    preview: models.Field = models.ImageField(upload_to='deal_image_previews', default='', max_length=512)    thumbnail: models.Field = models.ImageField(upload_to='deal_image_thumbnails', default='', max_length=512)    uploaded: models.Field = models.BooleanField(default=False)    created_at: models.Field = models.DateTimeField(auto_now_add=True, db_index=True)    class Meta:        db_table = 'dealmatch_dealimage'class DealAttachment(mx.DealAttachment, models.Model):    uuid: models.Field = models.CharField(max_length=36, db_index=True, default=generate_uuid)    deal: models.Field = models.ForeignKey('Deal', on_delete=models.CASCADE,                                           related_name='attachments')    attachment_type: models.Field = models.CharField(        max_length=36, db_index=True,        choices=c.enum_to_choice(c.DealAttachmentType)    )    resource: models.Field = models.FileField(        upload_to=partial(prefix_path, 'deal_attachments'),        max_length=512    )    uploaded: models.Field = models.BooleanField(default=False)    verified: models.Field = models.BooleanField(default=True)    created_at: models.Field = models.DateTimeField(auto_now_add=True, db_index=True)    class Meta:        db_table = 'dealmatch_dealattachment'class DealLink(models.Model):    uuid: models.Field = models.CharField(max_length=36, db_index=True, default=generate_uuid)    deal: models.Field = models.ForeignKey('Deal', on_delete=models.CASCADE,                                           related_name='links')    resource: models.Field = models.URLField()    created_at: models.Field = models.DateTimeField(auto_now_add=True, db_index=True)    class Meta:        db_table = 'dealmatch_deallink'class DealProposal(mx.DealProposal, models.Model):    uuid: models.Field = models.CharField(max_length=36, db_index=True, default=generate_uuid)    owner: models.Field = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name='dealproposals')    deal: models.Field = models.ForeignKey('Deal', on_delete=models.CASCADE, related_name='proposals')    type: models.Field = models.CharField(max_length=30, db_index=True,                                          choices=c.enum_to_choice(c.DealDiscussionType),                                          default=c.DealDiscussionType.dealproposal.name)    status: models.Field = models.CharField(max_length=30, db_index=True,                                            choices=c.enum_to_choice(c.DealProposalStatus),                                            default=c.DealProposalStatus.requested.name)    title: models.Field = models.CharField(max_length=50, verbose_name='제안 제목', null=True, blank=True)    content: models.Field = models.CharField(max_length=1000, verbose_name='제안 내용', null=True, blank=True)    created_at: models.Field = models.DateTimeField(auto_now_add=True, db_index=True)    viewed_at: models.Field = models.DateTimeField(null=True, blank=True)    comment_count: models.Field = models.IntegerField(default=0)    comment_attachment_count: models.Field = models.IntegerField(default=0)    last_activated_at = models.DateTimeField(null=True, blank=True, verbose_name='최근 업데이트')    recipient: models.Field = models.ForeignKey(settings.AUTH_USER_MODEL, verbose_name='수신인', null=True, blank=True,                                               related_name='proposal_receiver', on_delete=models.SET_NULL)    objects = mm.DealProposalManager.from_queryset(mqs.DealProposalQuerySet)()    class Meta:        db_table = 'dealmatch_dealproposal'        verbose_name = '딜 제안'        verbose_name_plural = '딜 제안(들)'        constraints = [            UniqueConstraint(fields=['owner', 'deal'], name='uniq_owner_deal'),        ]class FinancingDealProposal(models.Model):    dealproposal: models.Field = models.OneToOneField('DealProposal', on_delete=models.CASCADE)    target_amount: models.Field = models.IntegerField(null=True, blank=True)    maturity: models.Field = models.IntegerField(null=True, blank=True)    due_date: models.Field = models.DateTimeField(null=True, blank=True)    all_in_cost: models.Field = models.FloatField(null=True, blank=True)    summary: models.Field = models.CharField(max_length=4000, default='')    class Meta:        db_table = 'dealmatch_financingdealproposal'class ServiceDealProposal(models.Model):    dealproposal: models.Field = models.OneToOneField('DealProposal', on_delete=models.CASCADE)    budget_from: models.Field = models.IntegerField(null=True, blank=True)    budget_to: models.Field = models.IntegerField(null=True, blank=True)    use_escrow: models.Field = models.BooleanField(default=False)    work_scope: models.Field = models.CharField(max_length=4000)    deliverables: models.Field = models.CharField(max_length=4000)    etc: models.Field = models.CharField(max_length=4000, default='')    class Meta:        db_table = 'dealmatch_servicedealproposal'class SalesDealProposal(models.Model):    dealproposal: models.Field = models.OneToOneField('DealProposal', on_delete=models.CASCADE)    target_amount: models.Field = models.IntegerField(null=True, blank=True)    due_date: models.Field = models.DateTimeField()    summary: models.Field = models.CharField(max_length=4000, default='')    class Meta:        db_table = 'dealmatch_salesdealproposal'class DealProposalAttachment(models.Model):    uuid: models.Field = models.CharField(max_length=36, db_index=True, default=generate_uuid)    dealproposal: models.Field = models.ForeignKey('DealProposal', null=True, on_delete=models.CASCADE,                                                   related_name='attachments')    resource: models.Field = models.FileField(        upload_to=partial(prefix_path, 'dealproposal_attachments'),        max_length=512)    uploaded: models.Field = models.BooleanField(default=False)    created_at: models.Field = models.DateTimeField(auto_now_add=True, db_index=True)    objects = mm.DealProposalAttachmentManager.from_queryset(mqs.DealProposalAttachmentQuerySet)()    class Meta:        db_table = 'dealmatch_dealproposalattachment'class DealProposalLink(models.Model):    uuid: models.Field = models.CharField(max_length=36, db_index=True, default=generate_uuid)    dealproposal: models.Field = models.ForeignKey('DealProposal', null=True, on_delete=models.CASCADE,                                                   related_name='links')    resource: models.Field = models.URLField()    created_at: models.Field = models.DateTimeField(auto_now_add=True, db_index=True)    objects = mm.DealProposalLinkManager.from_queryset(mqs.DealProposalLinkQuerySet)()    class Meta:        db_table = 'dealmatch_dealproposallink'class DealProposalUser(models.Model):    uuid: models.Field = models.CharField(max_length=36, db_index=True, default=generate_uuid)    user: models.Field = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)    dealproposal: models.Field = models.ForeignKey('DealProposal', on_delete=models.CASCADE)    is_archived: models.Field = models.BooleanField(default=False)    created_at: models.Field = models.DateTimeField(auto_now_add=True)class DealProposalComment(mx.DealProposalComment, models.Model):    uuid: models.Field = models.CharField(max_length=36, db_index=True, default=generate_uuid)    user: models.Field = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)    deal_proposal: models.Field = models.ForeignKey('DealProposal', on_delete=models.CASCADE, related_name='comments')    content: models.Field = models.CharField(max_length=1000, verbose_name='댓글 내용')    deleted_at: models.Field = models.DateTimeField(null=True, blank=True)    updated_at: models.Field = models.DateTimeField(null=True, blank=True)    created_at: models.Field = models.DateTimeField(auto_now_add=True, verbose_name='등록일')    objects = mm.DealProposalCommentManager.from_queryset(mqs.DealProposalCommentQuerySet)()    class Meta:        db_table = 'dealmatch_dealproposalcomment'        verbose_name = '딜 제안 댓글'        verbose_name_plural = '딜 제안 댓글(들)'class DealProposalCommentAttachment(models.Model):    uuid: models.Field = models.CharField(max_length=36, db_index=True, default=generate_uuid)    comment: models.Field = models.ForeignKey('DealProposalComment', on_delete=models.CASCADE,                                           related_name='attachments', blank=True, null=True)    resource: models.Field = models.FileField(        upload_to=partial(prefix_path, 'dealproposal_comment_attachments'),        max_length=512, blank=True, null=True    )    uploaded: models.Field = models.BooleanField(default=False)    created_at: models.Field = models.DateTimeField(auto_now_add=True, db_index=True)    deleted_at: models.Field = models.DateTimeField(blank=True, null=True)    objects = mm.DealProposalCommentAttachmentManager.from_queryset(mqs.DealProposalCommentAttachmentQuerySet)()    class Meta:        db_table = 'dealmatch_dealproposalcommentattachment'class FeaturedDeal(models.Model):    deal: models.Field = models.OneToOneField('Deal', on_delete=models.CASCADE)    priority: models.Field = models.IntegerField(default=100)    created_at: models.Field = models.DateTimeField(auto_now_add=True, db_index=True)    objects = mm.FeaturedDealManager.from_queryset(mqs.FeaturedDealQuerySet)()    class Meta:        db_table = 'dealmatch_featureddeal'        verbose_name = '추천하는 딜'        verbose_name_plural = '추천하는 딜(들)'class DealBookmark(models.Model):    uuid: models.Field = models.CharField(max_length=36, db_index=True, default=generate_uuid)    deal: models.Field = models.ForeignKey('Deal', on_delete=models.CASCADE)    user: models.Field = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)    created_at: models.Field = models.DateTimeField(auto_now_add=True, db_index=True)    objects = mm.DealBookmarkManager.from_queryset(mqs.DealBookmarkQuerySet)()    class Meta:        db_table = 'dealmatch_dealbookmark'        verbose_name = '북마크'        verbose_name_plural = '북마크(들)'        constraints = [            UniqueConstraint(fields=('deal', 'user'), name='uniq_dealbookmark_deal_user'),        ]class DealUseCase(models.Model):    uuid: models.Field = models.CharField(max_length=36, db_index=True, default=generate_uuid)    member_type: models.Field = models.CharField(max_length=30, db_index=True,                                                 choices=c.enum_to_choice(c.MemberType),                                                 verbose_name='회원 유형')    is_active: models.Field = models.BooleanField(default=True)    content: models.Field = models.CharField(max_length=300)    created_at: models.Field = models.DateTimeField(auto_now_add=True, verbose_name='사례 등록일')    objects = mm.DealUseCaseManager.from_queryset(mqs.DealUseCaseQuerySet)()    class Meta:        db_table = 'dealmatch_dealusecase'        verbose_name = '딜 사례'        verbose_name_plural = '딜 사례(들)'class Partner(mx.Partner, models.Model):    uuid: models.Field = models.CharField(max_length=36, db_index=True, default=generate_uuid)    name: models.Field = models.CharField(max_length=100, verbose_name='파트너스 이름')    partner_type: models.Field = models.CharField(max_length=30, db_index=True,                                                  default=c.MemberType.contractor.name,                                                  choices=c.enum_to_choice(c.MemberType),                                                  verbose_name='파트너 유형')    logo_image: models.Field = models.ImageField(        upload_to=partial(prefix_path, 'partners_logo_image'),        blank=True, null=True, verbose_name='로고 이미지',        max_length=512    )    cover_image: models.Field = models.ImageField(        upload_to=partial(prefix_path, 'partners_cover_image'),        blank=True, null=True, verbose_name='커버 이미지',        max_length=512,    )    chip_image: models.Field = models.ImageField(        upload_to=partial(prefix_path, 'partners_chip_image'),        blank=True, null=True, verbose_name='칩 이미지',        max_length=512,    )    short_intro: models.Field = models.CharField(max_length=100, verbose_name='파트너스 한줄 소개')    representative: models.Field = models.CharField(max_length=20, verbose_name='대표자 성함', blank=True, null=True)    email: models.Field = models.CharField(max_length=60, verbose_name='파트너스 이메일', blank=True, null=True)    phone_number: models.Field = models.CharField(max_length=60, verbose_name='대표 전화번호', blank=True, null=True)    fax_number: models.Field = models.CharField(max_length=60, verbose_name='팩스 번호', blank=True, null=True)    intro: models.Field = models.CharField(max_length=1024, verbose_name='회사 소개', blank=True, null=True)    work_history: models.Field = models.CharField(max_length=1024, blank=True, null=True, verbose_name='프로젝트 수행 이력')    address: models.Field = models.CharField(max_length=100, verbose_name='사업장 주소')    address_detail: models.Field = models.CharField(max_length=100, verbose_name='사업장 상세 주소', null=True, blank=True)    is_active: models.Field = models.BooleanField(default=True)    primary_color: models.Field = models.CharField(max_length=10, verbose_name='대표 색상', blank=True, null=True)    created_at: models.Field = models.DateTimeField(auto_now_add=True, verbose_name='등록일')    users = models.ManyToManyField(settings.AUTH_USER_MODEL,                                   through='UserPartner',                                   related_name='partners',                                   limit_choices_to={'is_active': True})    categories = models.ManyToManyField('Category',                                        through='PartnerCategory',                                        related_name='partners')    objects = mm.PartnerManager.from_queryset(mqs.PartnerQuerySet)()    class Meta:        db_table = 'dealmatch_partner'        verbose_name = '파트너'        verbose_name_plural = '파트너스'class FeaturedPartner(models.Model):    partner: models.Field = models.ForeignKey('Partner', on_delete=models.CASCADE)    priority: models.Field = models.IntegerField(default=100)    created_at: models.Field = models.DateTimeField(auto_now_add=True, verbose_name='등록일')    objects = mm.FeaturedPartnerManager.from_queryset(mqs.FeaturedPartnerQuerySet)()    class Meta:        db_table = 'dealmatch_featuredpartner'        verbose_name = '추천하는 파트너스'        verbose_name_plural = '추천하는 파트너스(들)'class MajorServicePartner(models.Model):    partner: models.Field = models.ForeignKey('Partner', on_delete=models.CASCADE)    priority: models.Field = models.IntegerField(default=100)    created_at: models.Field = models.DateTimeField(auto_now_add=True, verbose_name='등록일')    objects = mm.MajorServicePartnerManager.from_queryset(mqs.MajorServicePartnerQuerySet)()    class Meta:        db_table = 'dealmatch_majorservicepartner'class UserPartner(models.Model):    user: models.Field = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)    partner: models.Field = models.ForeignKey('Partner', on_delete=models.CASCADE)    created_at: models.Field = models.DateTimeField(auto_now_add=True, verbose_name='등록일')    class Meta:        db_table = 'dealmatch_userpartner'        verbose_name = '파트너스 유저'        verbose_name_plural = '파트너스 유저(들)'        constraints = [            UniqueConstraint(fields=['user', 'partner'], name='uniq_user_partner'),        ]class PartnerCategory(models.Model):    partner: models.Field = models.ForeignKey('Partner', on_delete=models.CASCADE)    category: models.Field = models.ForeignKey( 'Category', on_delete=models.CASCADE)    class Meta:        db_table = 'dealmatch_partnercategory'class PartnerInvitation(mx.PartnerInvitation, models.Model):    uuid: models.Field = models.CharField(max_length=36, db_index=True, default=generate_uuid)    partner: models.Field = models.ForeignKey('Partner', on_delete=models.CASCADE, related_name='invitations')    user: models.Field = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, null=True, blank=True)    status: models.Field = models.CharField(max_length=30, db_index=True,                                            choices=c.enum_to_choice(c.PartnerInvitationStatus),                                            default=c.PartnerInvitationStatus.requested.name)    expired_at: models.Field = models.DateTimeField(null=True, blank=True, verbose_name='만료 예정일')    created_at: models.Field = models.DateTimeField(auto_now_add=True, verbose_name='등록일')    objects = mm.PartnerInvitationManager.from_queryset(mqs.PartnerInvitationQuerySet)()    class Meta:        db_table = 'dealmatch_partnerinvitation'class PartnerReport(models.Model):    uuid: models.Field = models.CharField(max_length=36, db_index=True, default=generate_uuid)    partner: models.Field = models.ForeignKey('Partner', on_delete=models.CASCADE)    title: models.Field = models.CharField(max_length=50, blank=True, null=True)    url: models.Field = models.CharField(max_length=200, blank=True, null=True)    summary: models.Field = models.CharField(max_length=1500, blank=True, null=True)    published_at: models.Field = models.DateTimeField(verbose_name='발행일')    created_at: models.Field = models.DateTimeField(auto_now_add=True, verbose_name='등록일')    objects = mm.PartnerReportManager.from_queryset(mqs.PartnerReportQuerySet)()    class Meta:        db_table = 'dealmatch_partnerreport'        verbose_name = '파트너스 리포트'        verbose_name_plural = '파트너스 리포트(들)'class FeaturedPartnerReport(models.Model):    partner_report: models.Field = models.ForeignKey('PartnerReport', on_delete=models.CASCADE)    priority: models.Field = models.IntegerField(default=100)    created_at: models.Field = models.DateTimeField(auto_now_add=True, verbose_name='등록일')    objects = mm.FeaturedPartnerReportManager.from_queryset(mqs.FeaturedPartnerReportQuerySet)()    class Meta:        db_table = 'dealmatch_featuredpartnerreport'        verbose_name = '추천하는 리포트'        verbose_name_plural = '추천하는 리포트(들)'class ServiceRequest(RulesModel, mx.ServiceRequest, models.Model):    uuid: models.Field = models.CharField(max_length=36, db_index=True, default=generate_uuid)    owner: models.Field = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)    partner: models.Field = models.ForeignKey('Partner', on_delete=models.CASCADE,                                              related_name='service_requests')    type: models.Field = models.CharField(max_length=30, db_index=True,                                          choices=c.enum_to_choice(c.DealDiscussionType),                                          default=c.DealDiscussionType.service_request.name)    status: models.Field = models.CharField(max_length=30, db_index=True,                                            choices=c.enum_to_choice(c.ServiceRequestStatus),                                            default=c.ServiceRequestStatus.requested.name)    title: models.Field = models.CharField(max_length=50, verbose_name='의뢰 제목')    content: models.Field = models.CharField(max_length=1000, verbose_name='의뢰 내용')    created_at: models.Field = models.DateTimeField(auto_now_add=True, verbose_name='등록일')    viewed_at: models.Field = models.DateTimeField(verbose_name='열람일', null=True, blank=True)    comment_count: models.Field = models.IntegerField(default=0)    comment_attachment_count: models.Field = models.IntegerField(default=0)    last_activated_at: models.Field = models.DateTimeField(null=True, blank=True, verbose_name='최근 업데이트')    recipient: models.Field = models.ForeignKey(settings.AUTH_USER_MODEL, verbose_name='수신인', null=True, blank=True,                                               related_name='receiver', on_delete=models.SET_NULL)    objects = mm.ServiceRequestManager.from_queryset(mqs.ServiceRequestQuerySet)()    class Meta:        db_table = 'dealmatch_servicerequest'        verbose_name = '파트너스 의뢰'        verbose_name_plural = '파트너스 의뢰(들)'class ServiceRequestUser(models.Model):    uuid: models.Field = models.CharField(max_length=36, db_index=True, default=generate_uuid)    user: models.Field = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)    service_request: models.Field = models.ForeignKey('ServiceRequest', on_delete=models.CASCADE)    is_archived: models.Field = models.BooleanField(default=False)    created_at: models.Field = models.DateTimeField(auto_now_add=True)class ServiceRequestComment(mx.ServiceRequestComment, models.Model):    uuid: models.Field = models.CharField(max_length=36, db_index=True, default=generate_uuid)    user: models.Field = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)    service_request: models.Field = models.ForeignKey('ServiceRequest', on_delete=models.CASCADE)    content: models.Field = models.CharField(max_length=1000, verbose_name='댓글 내용')    deleted_at: models.Field = models.DateTimeField(null=True, blank=True)    updated_at: models.Field = models.DateTimeField(null=True, blank=True)    created_at: models.Field = models.DateTimeField(auto_now_add=True, verbose_name='등록일')    objects = mm.ServiceRequestCommentManager.from_queryset(mqs.ServiceRequestCommentQuerySet)()    class Meta:        db_table = 'dealmatch_servicerequestcomment'        verbose_name = '파트너스 의뢰 댓글'        verbose_name_plural = '파트너스 댓글(들)'class ServiceRequestCommentAttachment(models.Model):    uuid: models.Field = models.CharField(max_length=36, db_index=True, default=generate_uuid)    comment: models.Field = models.ForeignKey('ServiceRequestComment', on_delete=models.CASCADE,                                           related_name='attachments', blank=True, null=True)    resource: models.Field = models.FileField(        upload_to=partial(prefix_path, 'service-request-comment-attachments'),        max_length=512, blank=True, null=True    )    uploaded: models.Field = models.BooleanField(default=False)    created_at: models.Field = models.DateTimeField(auto_now_add=True, db_index=True)    deleted_at: models.Field = models.DateTimeField(blank=True, null=True)    objects = mm.ServiceRequestCommentAttachmentManager.from_queryset(mqs.ServiceRequestCommentAttachmentQuerySet)()    class Meta:        db_table = 'dealmatch_servicerequestcommentattachment',V
prefetch_related,v
                                   .prefetch_related('dealcategory_set')\,V
                                   .prefetch_realted,V
                                   .prefetch_related('dealcategory_set')\                                   .prefetch_related('dealcategory_set__category')\,V
                            {% with with_current_filters=selected_filters|add_to_list:dealcategory.category.id %}                              <a href="?{% preserve_filters 'filter' with_current_filters 'search_query' search_query %}"                                class="wb-category-filter"                              >{{ dealcategory.category.name|multilang }}</a>                            {% endwith %},V
                                   .prefetch_related('dealcategory_set__category')\,V
        prefetch_qs = m.,V
                            ,V
                                   .prefetch_related('categories')\,V
select_related,v
                                   .selected_related('categories')\,V
                            {% with with_current_filters=selected_filters|add_to_list:dealcategory.category.id %},V
cat_type_list,v
category,v
categories,v
ies,v
cat_type_list, ,v
cat_type_list=None, ,v
        if cat_t:            return categories,V
        catgories,V
        import pdb        pdb.set_trace(),V
rot,v
(type='sales_type').first(),,v
filter,v
                leaf_added_category_ids += [],V
            if not cat.parent:,V
        print(categories),V
        assert len(cat_ids) == 4,V
, flat=True,v
 flat=True,v
        # financing_deal: 에쿼티, 서울, 주거        # financing_deal2: 에쿼티, 경기, 숙박시설        # service_deal: 법률, 서울, 토지계약 (this omit asset_type),V
        # financing_deal: 에쿼티, 서울, 주거        # financing_deal2: 에쿼티, 경기, 숙박시설        # service_deal: 법률, 서울, 토지계약,V
=None,v
ml-8,v
 h-[30px],v
my-2.5 ml-8,v
my-2.5 mr-8,v
[50px],v
